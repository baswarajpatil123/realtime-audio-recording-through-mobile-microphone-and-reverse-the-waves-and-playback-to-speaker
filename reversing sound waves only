Reversing audio in real-time is a complex task that involves manipulating the audio buffer. Here's a simple example of how you might reverse the audio buffer in Java:

```java
public class AudioProcessor {

    private int bufferSize;
    private short[] buffer;

    public AudioProcessor(int bufferSize) {
        this.bufferSize = bufferSize;
        this.buffer = new short[bufferSize];
    }

    public void processAudio(short[] audioData) {
        // Copy the audio data into our buffer
        System.arraycopy(audioData, 0, buffer, 0, bufferSize);

        // Reverse the buffer
        for (int i = 0; i < bufferSize / 2; i++) {
            short temp = buffer[i];
            buffer[i] = buffer[bufferSize - i - 1];
            buffer[bufferSize - i - 1] = temp;
        }

        // Now, 'buffer' contains the reversed audio data
        // You can then feed this back into an AudioTrack for playback
    }
}
```

This code will take a buffer of audio data, reverse it, and store the result in its own buffer. You can then feed this reversed audio data into an `AudioTrack` for playback.

Please note that this is a very simplistic example and may not work perfectly for all types of audio data. Real-time audio processing is a complex field that often requires a good understanding of digital signal processing.

Also, keep in mind that reversing audio in real-time can lead to a strange sounding output, as the human ear is accustomed to hearing sounds that decay over time, not sounds that build up from silence and then abruptly stop.

This code is a starting point and might need adjustments based on your specific requirements. For more advanced audio processing, you might want to look into using a library like TarsosDSP or Superpowered. These libraries provide a range of audio processing features, including more sophisticated methods for reversing audio. They also handle a lot of the low-level details of audio processing, allowing you to focus on the higher-level aspects of your application. 

Remember to handle the permissions for recording audio and also consider the latency that might be introduced due to the processing. Real-time audio processing is a challenging task and requires careful handling of the audio data to ensure smooth and timely playback. Good luck with your project!
