Creating an Android app that records audio, reverses it, and plays it back in real-time is a complex task. It involves audio recording, processing, and playback, which are all non-trivial tasks in Android. 

Here's a simple example of how you might set up the audio recording and playback. Note that this does not include the audio reversing part, as that would require a more complex audio processing library or algorithm:

```java
import android.media.AudioFormat;
import android.media.AudioRecord;
import android.media.MediaRecorder;
import android.media.AudioTrack;

public class MainActivity extends AppCompatActivity {

    private AudioRecord recorder;
    private AudioTrack player;
    private int bufferSize;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        bufferSize = AudioRecord.getMinBufferSize(8000, AudioFormat.CHANNEL_IN_MONO, AudioFormat.ENCODING_PCM_16BIT);
        recorder = new AudioRecord(MediaRecorder.AudioSource.MIC, 8000, AudioFormat.CHANNEL_IN_MONO, AudioFormat.ENCODING_PCM_16BIT, bufferSize);
        player = new AudioTrack(AudioManager.STREAM_MUSIC, 8000, AudioFormat.CHANNEL_OUT_MONO, AudioFormat.ENCODING_PCM_16BIT, bufferSize, AudioTrack.MODE_STREAM);

        recorder.startRecording();
        player.play();

        Thread recordingThread = new Thread(new Runnable() {
            public void run() {
                readAudioData();
            }
        }, "AudioRecorder Thread");
        recordingThread.start();
    }

    private void readAudioData() {
        short data[] = new short[bufferSize];
        while (recorder.getRecordingState() == AudioRecord.RECORDSTATE_RECORDING) {
            recorder.read(data, 0, bufferSize);
            player.write(data, 0, bufferSize);
        }
    }
}
```

This code will record audio from the microphone and play it back through the speaker in real-time. However, it won't reverse the audio. Reversing audio in real-time is a complex task that would likely require a digital signal processing (DSP) library and a good understanding of audio processing techniques. You might want to look into libraries like TarsosDSP or Superpowered for this.

Please note that you need to request the `RECORD_AUDIO` permission in your AndroidManifest.xml file and also request it at runtime if you're targeting Android 6.0 (API level 23) or higher.

```xml
<uses-permission android:name="android.permission.RECORD_AUDIO" />
```

This is a complex task and might require further research and understanding of audio processing. I hope this gives you a good starting point!
